// Package publicapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package publicapi

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for NodeType.
const (
	NodeTypeDoor         NodeType = "door"
	NodeTypeIntersection NodeType = "intersection"
)

// BackgroundPoint defines model for BackgroundPoint.
type BackgroundPoint struct {
	Order int32   `json:"order"`
	X     float64 `json:"x"`
	Y     float64 `json:"y"`
}

// Building defines model for Building.
type Building struct {
	Address string             `json:"address"`
	Id      openapi_types.UUID `json:"id"`
	Name    string             `json:"name"`
}

// Connection defines model for Connection.
type Connection struct {
	FromId openapi_types.UUID `json:"from_id"`
	ToId   openapi_types.UUID `json:"to_id"`
	Weight float64            `json:"weight"`
}

// Door defines model for Door.
type Door struct {
	Height   float64            `json:"height"`
	Id       openapi_types.UUID `json:"id"`
	ObjectId openapi_types.UUID `json:"object_id"`
	Width    float64            `json:"width"`
	X        float64            `json:"x"`
	Y        float64            `json:"y"`
}

// Floor defines model for Floor.
type Floor struct {
	Alias string             `json:"alias"`
	Id    openapi_types.UUID `json:"id"`
	Name  string             `json:"name"`
}

// FloorBackgroundElement defines model for FloorBackgroundElement.
type FloorBackgroundElement struct {
	Id     openapi_types.UUID `json:"id"`
	Label  string             `json:"label"`
	Points []BackgroundPoint  `json:"points"`
	ZIndex int32              `json:"z_index"`
}

// FloorWithData defines model for FloorWithData.
type FloorWithData struct {
	Background []FloorBackgroundElement `json:"background"`
	Floor      Floor                    `json:"floor"`
	Objects    []Object                 `json:"objects"`
}

// GetDoorsResponse defines model for GetDoorsResponse.
type GetDoorsResponse struct {
	Height   float64            `json:"height"`
	Id       openapi_types.UUID `json:"id"`
	ObjectId openapi_types.UUID `json:"object_id"`
	Width    float64            `json:"width"`
	X        float64            `json:"x"`
	Y        float64            `json:"y"`
}

// GetObjectsResponse defines model for GetObjectsResponse.
type GetObjectsResponse struct {
	Building Building        `json:"building"`
	Floors   []FloorWithData `json:"floors"`
}

// Intersection defines model for Intersection.
type Intersection struct {
	FloorId openapi_types.UUID `json:"floor_id"`
	Id      openapi_types.UUID `json:"id"`
	X       float64            `json:"x"`
	Y       float64            `json:"y"`
}

// Node defines model for Node.
type Node struct {
	Id   openapi_types.UUID `json:"id"`
	Type NodeType           `json:"type"`
	X    float64            `json:"x"`
	Y    float64            `json:"y"`
}

// NodeType defines model for NodeType.
type NodeType string

// Object defines model for Object.
type Object struct {
	Alias        string             `json:"alias"`
	Description  string             `json:"description"`
	Doors        []Door             `json:"doors"`
	Floor        Floor              `json:"floor"`
	Height       float64            `json:"height"`
	Id           openapi_types.UUID `json:"id"`
	Name         string             `json:"name"`
	ObjectTypeId int32              `json:"object_type_id"`
	Width        float64            `json:"width"`
	X            float64            `json:"x"`
	Y            float64            `json:"y"`
}

// ObjectTypeInfo defines model for ObjectTypeInfo.
type ObjectTypeInfo struct {
	Alias string `json:"alias"`
	Id    int32  `json:"id"`
	Name  string `json:"name"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	Category string             `json:"category"`
	ObjectId openapi_types.UUID `json:"object_id"`
	Preview  string             `json:"preview"`
}

// GetApiBuildingsBuildingIdSearchParams defines parameters for GetApiBuildingsBuildingIdSearch.
type GetApiBuildingsBuildingIdSearchParams struct {
	// Query Search query string
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Category Filter by one or more object categories
	Category *[]string `form:"category,omitempty" json:"category,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiBuildings request
	GetApiBuildings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBuildingsBuildingId request
	GetApiBuildingsBuildingId(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBuildingsBuildingIdConnections request
	GetApiBuildingsBuildingIdConnections(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBuildingsBuildingIdDoors request
	GetApiBuildingsBuildingIdDoors(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBuildingsBuildingIdFloors request
	GetApiBuildingsBuildingIdFloors(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBuildingsBuildingIdGraphNodes request
	GetApiBuildingsBuildingIdGraphNodes(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBuildingsBuildingIdIntersections request
	GetApiBuildingsBuildingIdIntersections(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBuildingsBuildingIdObjects request
	GetApiBuildingsBuildingIdObjects(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBuildingsBuildingIdObjectsObjectId request
	GetApiBuildingsBuildingIdObjectsObjectId(ctx context.Context, buildingId openapi_types.UUID, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBuildingsBuildingIdSearch request
	GetApiBuildingsBuildingIdSearch(ctx context.Context, buildingId openapi_types.UUID, params *GetApiBuildingsBuildingIdSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCategories request
	GetApiCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiBuildings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBuildingsBuildingId(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsBuildingIdRequest(c.Server, buildingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBuildingsBuildingIdConnections(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsBuildingIdConnectionsRequest(c.Server, buildingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBuildingsBuildingIdDoors(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsBuildingIdDoorsRequest(c.Server, buildingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBuildingsBuildingIdFloors(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsBuildingIdFloorsRequest(c.Server, buildingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBuildingsBuildingIdGraphNodes(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsBuildingIdGraphNodesRequest(c.Server, buildingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBuildingsBuildingIdIntersections(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsBuildingIdIntersectionsRequest(c.Server, buildingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBuildingsBuildingIdObjects(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsBuildingIdObjectsRequest(c.Server, buildingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBuildingsBuildingIdObjectsObjectId(ctx context.Context, buildingId openapi_types.UUID, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsBuildingIdObjectsObjectIdRequest(c.Server, buildingId, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBuildingsBuildingIdSearch(ctx context.Context, buildingId openapi_types.UUID, params *GetApiBuildingsBuildingIdSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBuildingsBuildingIdSearchRequest(c.Server, buildingId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiBuildingsRequest generates requests for GetApiBuildings
func NewGetApiBuildingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBuildingsBuildingIdRequest generates requests for GetApiBuildingsBuildingId
func NewGetApiBuildingsBuildingIdRequest(server string, buildingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBuildingsBuildingIdConnectionsRequest generates requests for GetApiBuildingsBuildingIdConnections
func NewGetApiBuildingsBuildingIdConnectionsRequest(server string, buildingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBuildingsBuildingIdDoorsRequest generates requests for GetApiBuildingsBuildingIdDoors
func NewGetApiBuildingsBuildingIdDoorsRequest(server string, buildingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/doors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBuildingsBuildingIdFloorsRequest generates requests for GetApiBuildingsBuildingIdFloors
func NewGetApiBuildingsBuildingIdFloorsRequest(server string, buildingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/floors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBuildingsBuildingIdGraphNodesRequest generates requests for GetApiBuildingsBuildingIdGraphNodes
func NewGetApiBuildingsBuildingIdGraphNodesRequest(server string, buildingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/graph/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBuildingsBuildingIdIntersectionsRequest generates requests for GetApiBuildingsBuildingIdIntersections
func NewGetApiBuildingsBuildingIdIntersectionsRequest(server string, buildingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/intersections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBuildingsBuildingIdObjectsRequest generates requests for GetApiBuildingsBuildingIdObjects
func NewGetApiBuildingsBuildingIdObjectsRequest(server string, buildingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/objects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBuildingsBuildingIdObjectsObjectIdRequest generates requests for GetApiBuildingsBuildingIdObjectsObjectId
func NewGetApiBuildingsBuildingIdObjectsObjectIdRequest(server string, buildingId openapi_types.UUID, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "object_id", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/objects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBuildingsBuildingIdSearchRequest generates requests for GetApiBuildingsBuildingIdSearch
func NewGetApiBuildingsBuildingIdSearchRequest(server string, buildingId openapi_types.UUID, params *GetApiBuildingsBuildingIdSearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCategoriesRequest generates requests for GetApiCategories
func NewGetApiCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiBuildingsWithResponse request
	GetApiBuildingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBuildingsResponse, error)

	// GetApiBuildingsBuildingIdWithResponse request
	GetApiBuildingsBuildingIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdResponse, error)

	// GetApiBuildingsBuildingIdConnectionsWithResponse request
	GetApiBuildingsBuildingIdConnectionsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdConnectionsResponse, error)

	// GetApiBuildingsBuildingIdDoorsWithResponse request
	GetApiBuildingsBuildingIdDoorsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdDoorsResponse, error)

	// GetApiBuildingsBuildingIdFloorsWithResponse request
	GetApiBuildingsBuildingIdFloorsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdFloorsResponse, error)

	// GetApiBuildingsBuildingIdGraphNodesWithResponse request
	GetApiBuildingsBuildingIdGraphNodesWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdGraphNodesResponse, error)

	// GetApiBuildingsBuildingIdIntersectionsWithResponse request
	GetApiBuildingsBuildingIdIntersectionsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdIntersectionsResponse, error)

	// GetApiBuildingsBuildingIdObjectsWithResponse request
	GetApiBuildingsBuildingIdObjectsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdObjectsResponse, error)

	// GetApiBuildingsBuildingIdObjectsObjectIdWithResponse request
	GetApiBuildingsBuildingIdObjectsObjectIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdObjectsObjectIdResponse, error)

	// GetApiBuildingsBuildingIdSearchWithResponse request
	GetApiBuildingsBuildingIdSearchWithResponse(ctx context.Context, buildingId openapi_types.UUID, params *GetApiBuildingsBuildingIdSearchParams, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdSearchResponse, error)

	// GetApiCategoriesWithResponse request
	GetApiCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiCategoriesResponse, error)
}

type GetApiBuildingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Buildings *[]Building `json:"buildings,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBuildingsBuildingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Building
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsBuildingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsBuildingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBuildingsBuildingIdConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Connections *[]Connection `json:"connections,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsBuildingIdConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsBuildingIdConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBuildingsBuildingIdDoorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Doors *[]GetDoorsResponse `json:"doors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsBuildingIdDoorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsBuildingIdDoorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBuildingsBuildingIdFloorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Floors *[]Floor `json:"floors,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsBuildingIdFloorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsBuildingIdFloorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBuildingsBuildingIdGraphNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Nodes *[]Node `json:"nodes,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsBuildingIdGraphNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsBuildingIdGraphNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBuildingsBuildingIdIntersectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Intersections *[]Intersection `json:"intersections,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsBuildingIdIntersectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsBuildingIdIntersectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBuildingsBuildingIdObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetObjectsResponse
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsBuildingIdObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsBuildingIdObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBuildingsBuildingIdObjectsObjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Object
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsBuildingIdObjectsObjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsBuildingIdObjectsObjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBuildingsBuildingIdSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results *[]SearchResult `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiBuildingsBuildingIdSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBuildingsBuildingIdSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Categories *[]ObjectTypeInfo `json:"categories,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiBuildingsWithResponse request returning *GetApiBuildingsResponse
func (c *ClientWithResponses) GetApiBuildingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiBuildingsResponse, error) {
	rsp, err := c.GetApiBuildings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsResponse(rsp)
}

// GetApiBuildingsBuildingIdWithResponse request returning *GetApiBuildingsBuildingIdResponse
func (c *ClientWithResponses) GetApiBuildingsBuildingIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdResponse, error) {
	rsp, err := c.GetApiBuildingsBuildingId(ctx, buildingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsBuildingIdResponse(rsp)
}

// GetApiBuildingsBuildingIdConnectionsWithResponse request returning *GetApiBuildingsBuildingIdConnectionsResponse
func (c *ClientWithResponses) GetApiBuildingsBuildingIdConnectionsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdConnectionsResponse, error) {
	rsp, err := c.GetApiBuildingsBuildingIdConnections(ctx, buildingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsBuildingIdConnectionsResponse(rsp)
}

// GetApiBuildingsBuildingIdDoorsWithResponse request returning *GetApiBuildingsBuildingIdDoorsResponse
func (c *ClientWithResponses) GetApiBuildingsBuildingIdDoorsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdDoorsResponse, error) {
	rsp, err := c.GetApiBuildingsBuildingIdDoors(ctx, buildingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsBuildingIdDoorsResponse(rsp)
}

// GetApiBuildingsBuildingIdFloorsWithResponse request returning *GetApiBuildingsBuildingIdFloorsResponse
func (c *ClientWithResponses) GetApiBuildingsBuildingIdFloorsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdFloorsResponse, error) {
	rsp, err := c.GetApiBuildingsBuildingIdFloors(ctx, buildingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsBuildingIdFloorsResponse(rsp)
}

// GetApiBuildingsBuildingIdGraphNodesWithResponse request returning *GetApiBuildingsBuildingIdGraphNodesResponse
func (c *ClientWithResponses) GetApiBuildingsBuildingIdGraphNodesWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdGraphNodesResponse, error) {
	rsp, err := c.GetApiBuildingsBuildingIdGraphNodes(ctx, buildingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsBuildingIdGraphNodesResponse(rsp)
}

// GetApiBuildingsBuildingIdIntersectionsWithResponse request returning *GetApiBuildingsBuildingIdIntersectionsResponse
func (c *ClientWithResponses) GetApiBuildingsBuildingIdIntersectionsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdIntersectionsResponse, error) {
	rsp, err := c.GetApiBuildingsBuildingIdIntersections(ctx, buildingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsBuildingIdIntersectionsResponse(rsp)
}

// GetApiBuildingsBuildingIdObjectsWithResponse request returning *GetApiBuildingsBuildingIdObjectsResponse
func (c *ClientWithResponses) GetApiBuildingsBuildingIdObjectsWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdObjectsResponse, error) {
	rsp, err := c.GetApiBuildingsBuildingIdObjects(ctx, buildingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsBuildingIdObjectsResponse(rsp)
}

// GetApiBuildingsBuildingIdObjectsObjectIdWithResponse request returning *GetApiBuildingsBuildingIdObjectsObjectIdResponse
func (c *ClientWithResponses) GetApiBuildingsBuildingIdObjectsObjectIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdObjectsObjectIdResponse, error) {
	rsp, err := c.GetApiBuildingsBuildingIdObjectsObjectId(ctx, buildingId, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsBuildingIdObjectsObjectIdResponse(rsp)
}

// GetApiBuildingsBuildingIdSearchWithResponse request returning *GetApiBuildingsBuildingIdSearchResponse
func (c *ClientWithResponses) GetApiBuildingsBuildingIdSearchWithResponse(ctx context.Context, buildingId openapi_types.UUID, params *GetApiBuildingsBuildingIdSearchParams, reqEditors ...RequestEditorFn) (*GetApiBuildingsBuildingIdSearchResponse, error) {
	rsp, err := c.GetApiBuildingsBuildingIdSearch(ctx, buildingId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBuildingsBuildingIdSearchResponse(rsp)
}

// GetApiCategoriesWithResponse request returning *GetApiCategoriesResponse
func (c *ClientWithResponses) GetApiCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiCategoriesResponse, error) {
	rsp, err := c.GetApiCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCategoriesResponse(rsp)
}

// ParseGetApiBuildingsResponse parses an HTTP response from a GetApiBuildingsWithResponse call
func ParseGetApiBuildingsResponse(rsp *http.Response) (*GetApiBuildingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Buildings *[]Building `json:"buildings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBuildingsBuildingIdResponse parses an HTTP response from a GetApiBuildingsBuildingIdWithResponse call
func ParseGetApiBuildingsBuildingIdResponse(rsp *http.Response) (*GetApiBuildingsBuildingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsBuildingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Building
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBuildingsBuildingIdConnectionsResponse parses an HTTP response from a GetApiBuildingsBuildingIdConnectionsWithResponse call
func ParseGetApiBuildingsBuildingIdConnectionsResponse(rsp *http.Response) (*GetApiBuildingsBuildingIdConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsBuildingIdConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Connections *[]Connection `json:"connections,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBuildingsBuildingIdDoorsResponse parses an HTTP response from a GetApiBuildingsBuildingIdDoorsWithResponse call
func ParseGetApiBuildingsBuildingIdDoorsResponse(rsp *http.Response) (*GetApiBuildingsBuildingIdDoorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsBuildingIdDoorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Doors *[]GetDoorsResponse `json:"doors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBuildingsBuildingIdFloorsResponse parses an HTTP response from a GetApiBuildingsBuildingIdFloorsWithResponse call
func ParseGetApiBuildingsBuildingIdFloorsResponse(rsp *http.Response) (*GetApiBuildingsBuildingIdFloorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsBuildingIdFloorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Floors *[]Floor `json:"floors,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBuildingsBuildingIdGraphNodesResponse parses an HTTP response from a GetApiBuildingsBuildingIdGraphNodesWithResponse call
func ParseGetApiBuildingsBuildingIdGraphNodesResponse(rsp *http.Response) (*GetApiBuildingsBuildingIdGraphNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsBuildingIdGraphNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Nodes *[]Node `json:"nodes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBuildingsBuildingIdIntersectionsResponse parses an HTTP response from a GetApiBuildingsBuildingIdIntersectionsWithResponse call
func ParseGetApiBuildingsBuildingIdIntersectionsResponse(rsp *http.Response) (*GetApiBuildingsBuildingIdIntersectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsBuildingIdIntersectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Intersections *[]Intersection `json:"intersections,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBuildingsBuildingIdObjectsResponse parses an HTTP response from a GetApiBuildingsBuildingIdObjectsWithResponse call
func ParseGetApiBuildingsBuildingIdObjectsResponse(rsp *http.Response) (*GetApiBuildingsBuildingIdObjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsBuildingIdObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetObjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBuildingsBuildingIdObjectsObjectIdResponse parses an HTTP response from a GetApiBuildingsBuildingIdObjectsObjectIdWithResponse call
func ParseGetApiBuildingsBuildingIdObjectsObjectIdResponse(rsp *http.Response) (*GetApiBuildingsBuildingIdObjectsObjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsBuildingIdObjectsObjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiBuildingsBuildingIdSearchResponse parses an HTTP response from a GetApiBuildingsBuildingIdSearchWithResponse call
func ParseGetApiBuildingsBuildingIdSearchResponse(rsp *http.Response) (*GetApiBuildingsBuildingIdSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBuildingsBuildingIdSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results *[]SearchResult `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiCategoriesResponse parses an HTTP response from a GetApiCategoriesWithResponse call
func ParseGetApiCategoriesResponse(rsp *http.Response) (*GetApiCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Categories *[]ObjectTypeInfo `json:"categories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve all buildings
	// (GET /api/buildings)
	GetApiBuildings(c *gin.Context)
	// Retrieve a building by its ID
	// (GET /api/buildings/{building_id})
	GetApiBuildingsBuildingId(c *gin.Context, buildingId openapi_types.UUID)
	// Retrieve all connections for a building
	// (GET /api/buildings/{building_id}/connections)
	GetApiBuildingsBuildingIdConnections(c *gin.Context, buildingId openapi_types.UUID)
	// Retrieve all doors for a building
	// (GET /api/buildings/{building_id}/doors)
	GetApiBuildingsBuildingIdDoors(c *gin.Context, buildingId openapi_types.UUID)
	// Retrieve all floors for a building
	// (GET /api/buildings/{building_id}/floors)
	GetApiBuildingsBuildingIdFloors(c *gin.Context, buildingId openapi_types.UUID)
	// Retrieve all graph nodes (doors and intersections) for a building
	// (GET /api/buildings/{building_id}/graph/nodes)
	GetApiBuildingsBuildingIdGraphNodes(c *gin.Context, buildingId openapi_types.UUID)
	// Retrieve all intersections for a building
	// (GET /api/buildings/{building_id}/intersections)
	GetApiBuildingsBuildingIdIntersections(c *gin.Context, buildingId openapi_types.UUID)
	// Retrieve all objects for a building
	// (GET /api/buildings/{building_id}/objects)
	GetApiBuildingsBuildingIdObjects(c *gin.Context, buildingId openapi_types.UUID)
	// Retrieve an object by its ID
	// (GET /api/buildings/{building_id}/objects/{object_id})
	GetApiBuildingsBuildingIdObjectsObjectId(c *gin.Context, buildingId openapi_types.UUID, objectId openapi_types.UUID)
	// Search objects within a building
	// (GET /api/buildings/{building_id}/search)
	GetApiBuildingsBuildingIdSearch(c *gin.Context, buildingId openapi_types.UUID, params GetApiBuildingsBuildingIdSearchParams)
	// Retrieve all object categories
	// (GET /api/categories)
	GetApiCategories(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiBuildings operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildings(c)
}

// GetApiBuildingsBuildingId operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildingsBuildingId(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildingsBuildingId(c, buildingId)
}

// GetApiBuildingsBuildingIdConnections operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildingsBuildingIdConnections(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildingsBuildingIdConnections(c, buildingId)
}

// GetApiBuildingsBuildingIdDoors operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildingsBuildingIdDoors(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildingsBuildingIdDoors(c, buildingId)
}

// GetApiBuildingsBuildingIdFloors operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildingsBuildingIdFloors(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildingsBuildingIdFloors(c, buildingId)
}

// GetApiBuildingsBuildingIdGraphNodes operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildingsBuildingIdGraphNodes(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildingsBuildingIdGraphNodes(c, buildingId)
}

// GetApiBuildingsBuildingIdIntersections operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildingsBuildingIdIntersections(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildingsBuildingIdIntersections(c, buildingId)
}

// GetApiBuildingsBuildingIdObjects operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildingsBuildingIdObjects(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildingsBuildingIdObjects(c, buildingId)
}

// GetApiBuildingsBuildingIdObjectsObjectId operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildingsBuildingIdObjectsObjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "object_id" -------------
	var objectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "object_id", c.Param("object_id"), &objectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildingsBuildingIdObjectsObjectId(c, buildingId, objectId)
}

// GetApiBuildingsBuildingIdSearch operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuildingsBuildingIdSearch(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiBuildingsBuildingIdSearchParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuildingsBuildingIdSearch(c, buildingId, params)
}

// GetApiCategories operation middleware
func (siw *ServerInterfaceWrapper) GetApiCategories(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiCategories(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/buildings", wrapper.GetApiBuildings)
	router.GET(options.BaseURL+"/api/buildings/:building_id", wrapper.GetApiBuildingsBuildingId)
	router.GET(options.BaseURL+"/api/buildings/:building_id/connections", wrapper.GetApiBuildingsBuildingIdConnections)
	router.GET(options.BaseURL+"/api/buildings/:building_id/doors", wrapper.GetApiBuildingsBuildingIdDoors)
	router.GET(options.BaseURL+"/api/buildings/:building_id/floors", wrapper.GetApiBuildingsBuildingIdFloors)
	router.GET(options.BaseURL+"/api/buildings/:building_id/graph/nodes", wrapper.GetApiBuildingsBuildingIdGraphNodes)
	router.GET(options.BaseURL+"/api/buildings/:building_id/intersections", wrapper.GetApiBuildingsBuildingIdIntersections)
	router.GET(options.BaseURL+"/api/buildings/:building_id/objects", wrapper.GetApiBuildingsBuildingIdObjects)
	router.GET(options.BaseURL+"/api/buildings/:building_id/objects/:object_id", wrapper.GetApiBuildingsBuildingIdObjectsObjectId)
	router.GET(options.BaseURL+"/api/buildings/:building_id/search", wrapper.GetApiBuildingsBuildingIdSearch)
	router.GET(options.BaseURL+"/api/categories", wrapper.GetApiCategories)
}
