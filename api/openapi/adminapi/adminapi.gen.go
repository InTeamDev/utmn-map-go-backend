// Package adminapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package adminapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for NodeType.
const (
	NodeTypeDoor         NodeType = "door"
	NodeTypeIntersection NodeType = "intersection"
)

// AddIntersectionRequest defines model for AddIntersectionRequest.
type AddIntersectionRequest struct {
	FloorId openapi_types.UUID `json:"floor_id"`
	Id      openapi_types.UUID `json:"id"`
	X       float64            `json:"x"`
	Y       float64            `json:"y"`
}

// Building defines model for Building.
type Building struct {
	Address string             `json:"address"`
	Id      openapi_types.UUID `json:"id"`
	Name    string             `json:"name"`
}

// Connection defines model for Connection.
type Connection struct {
	FromId openapi_types.UUID `json:"from_id"`
	ToId   openapi_types.UUID `json:"to_id"`
	Weight float64            `json:"weight"`
}

// CreateBuildingInput defines model for CreateBuildingInput.
type CreateBuildingInput struct {
	Address string             `json:"address"`
	Id      openapi_types.UUID `json:"id"`
	Name    string             `json:"name"`
}

// CreateObjectInput defines model for CreateObjectInput.
type CreateObjectInput struct {
	Alias        string              `json:"alias"`
	Description  string              `json:"description"`
	Height       float64             `json:"height"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Name         string              `json:"name"`
	ObjectTypeId int32               `json:"object_type_id"`
	Width        float64             `json:"width"`
	X            float64             `json:"x"`
	Y            float64             `json:"y"`
}

// Door defines model for Door.
type Door struct {
	Height   float64            `json:"height"`
	Id       openapi_types.UUID `json:"id"`
	ObjectId openapi_types.UUID `json:"object_id"`
	Width    float64            `json:"width"`
	X        float64            `json:"x"`
	Y        float64            `json:"y"`
}

// Edge defines model for Edge.
type Edge struct {
	FromId openapi_types.UUID `json:"from_id"`
	ToId   openapi_types.UUID `json:"to_id"`
	Weight float64            `json:"weight"`
}

// Floor defines model for Floor.
type Floor struct {
	Alias string             `json:"alias"`
	Id    openapi_types.UUID `json:"id"`
	Name  string             `json:"name"`
}

// Intersection defines model for Intersection.
type Intersection struct {
	FloorId openapi_types.UUID `json:"floor_id"`
	Id      openapi_types.UUID `json:"id"`
	X       float64            `json:"x"`
	Y       float64            `json:"y"`
}

// Node defines model for Node.
type Node struct {
	Id   openapi_types.UUID `json:"id"`
	Type NodeType           `json:"type"`
	X    float64            `json:"x"`
	Y    float64            `json:"y"`
}

// NodeType defines model for NodeType.
type NodeType string

// Object defines model for Object.
type Object struct {
	Alias        string             `json:"alias"`
	Description  string             `json:"description"`
	Doors        []Door             `json:"doors"`
	Floor        Floor              `json:"floor"`
	Height       float64            `json:"height"`
	Id           openapi_types.UUID `json:"id"`
	Name         string             `json:"name"`
	ObjectTypeId int32              `json:"object_type_id"`
	Width        float64            `json:"width"`
	X            float64            `json:"x"`
	Y            float64            `json:"y"`
}

// ObjectTypeInfo defines model for ObjectTypeInfo.
type ObjectTypeInfo struct {
	Alias string `json:"alias"`
	Id    int32  `json:"id"`
	Name  string `json:"name"`
}

// Polygon defines model for Polygon.
type Polygon struct {
	FloorId openapi_types.UUID `json:"floor_id"`
	Id      openapi_types.UUID `json:"id"`
	Label   string             `json:"label"`
	Points  []PolygonPoint     `json:"points"`
	ZIndex  int32              `json:"z_index"`
}

// PolygonPoint defines model for PolygonPoint.
type PolygonPoint struct {
	Order     int32              `json:"order"`
	PolygonId openapi_types.UUID `json:"polygon_id"`
	X         float64            `json:"x"`
	Y         float64            `json:"y"`
}

// PolygonPointRequest defines model for PolygonPointRequest.
type PolygonPointRequest struct {
	PointOrder int32   `json:"point_order"`
	X          float64 `json:"x"`
	Y          float64 `json:"y"`
}

// SyncAllData defines model for SyncAllData.
type SyncAllData struct {
	Buildings   []SyncBuildings  `json:"buildings"`
	ObjectTypes []ObjectTypeInfo `json:"object_types"`
}

// SyncBuildings defines model for SyncBuildings.
type SyncBuildings struct {
	Address string             `json:"address"`
	Floors  []SyncFloors       `json:"floors"`
	Id      openapi_types.UUID `json:"id"`
	Name    string             `json:"name"`
}

// SyncFloors defines model for SyncFloors.
type SyncFloors struct {
	Alias         string             `json:"alias"`
	BuildingId    openapi_types.UUID `json:"building_id"`
	Connections   []Connection       `json:"connections"`
	Doors         []Door             `json:"doors"`
	FloorPolygons []Polygon          `json:"floor_polygons"`
	Id            openapi_types.UUID `json:"id"`
	Intersections []Intersection     `json:"intersections"`
	Name          string             `json:"name"`
	Objects       []Object           `json:"objects"`
}

// UpdateBuildingInput defines model for UpdateBuildingInput.
type UpdateBuildingInput struct {
	Address *string `json:"address,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// UpdateObjectInput defines model for UpdateObjectInput.
type UpdateObjectInput struct {
	Alias        *string  `json:"alias,omitempty"`
	Description  *string  `json:"description,omitempty"`
	Height       *float64 `json:"height,omitempty"`
	Name         *string  `json:"name,omitempty"`
	ObjectTypeId *int32   `json:"object_type_id,omitempty"`
	Width        *float64 `json:"width,omitempty"`
	X            *float64 `json:"x,omitempty"`
	Y            *float64 `json:"y,omitempty"`
}

// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONBody defines parameters for PostApiBuildingsBuildingIdFloorsFloorIdPoligons.
type PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONBody struct {
	Label  string `json:"label"`
	ZIndex *int32 `json:"z_index,omitempty"`
}

// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONBody defines parameters for PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints.
type PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONBody = []PolygonPointRequest

// PostApiBuildingsJSONRequestBody defines body for PostApiBuildings for application/json ContentType.
type PostApiBuildingsJSONRequestBody = CreateBuildingInput

// PatchApiBuildingsBuildingIdJSONRequestBody defines body for PatchApiBuildingsBuildingId for application/json ContentType.
type PatchApiBuildingsBuildingIdJSONRequestBody = UpdateBuildingInput

// PostApiBuildingsBuildingIdFloorsFloorIdObjectsJSONRequestBody defines body for PostApiBuildingsBuildingIdFloorsFloorIdObjects for application/json ContentType.
type PostApiBuildingsBuildingIdFloorsFloorIdObjectsJSONRequestBody = CreateObjectInput

// PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdJSONRequestBody defines body for PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId for application/json ContentType.
type PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdJSONRequestBody = UpdateObjectInput

// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONRequestBody defines body for PostApiBuildingsBuildingIdFloorsFloorIdPoligons for application/json ContentType.
type PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONRequestBody PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONBody

// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONRequestBody defines body for PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints for application/json ContentType.
type PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONRequestBody = PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONBody

// PostApiBuildingsBuildingIdRouteConnectionsJSONRequestBody defines body for PostApiBuildingsBuildingIdRouteConnections for application/json ContentType.
type PostApiBuildingsBuildingIdRouteConnectionsJSONRequestBody = Connection

// PostApiBuildingsBuildingIdRouteIntersectionsJSONRequestBody defines body for PostApiBuildingsBuildingIdRouteIntersections for application/json ContentType.
type PostApiBuildingsBuildingIdRouteIntersectionsJSONRequestBody = AddIntersectionRequest

// PostApiSyncJSONRequestBody defines body for PostApiSync for application/json ContentType.
type PostApiSyncJSONRequestBody = SyncAllData

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiBuildingsWithBody request with any body
	PostApiBuildingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBuildings(ctx context.Context, body PostApiBuildingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiBuildingsBuildingId request
	DeleteApiBuildingsBuildingId(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiBuildingsBuildingIdWithBody request with any body
	PatchApiBuildingsBuildingIdWithBody(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiBuildingsBuildingId(ctx context.Context, buildingId openapi_types.UUID, body PatchApiBuildingsBuildingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithBody request with any body
	PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithBody(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBuildingsBuildingIdFloorsFloorIdObjects(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId request
	DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithBody request with any body
	PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithBody(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, body PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithBody request with any body
	PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithBody(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBuildingsBuildingIdFloorsFloorIdPoligons(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithBody request with any body
	PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithBody(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBuildingsBuildingIdRouteConnectionsWithBody request with any body
	PostApiBuildingsBuildingIdRouteConnectionsWithBody(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBuildingsBuildingIdRouteConnections(ctx context.Context, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiBuildingsBuildingIdRouteIntersectionsWithBody request with any body
	PostApiBuildingsBuildingIdRouteIntersectionsWithBody(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiBuildingsBuildingIdRouteIntersections(ctx context.Context, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteIntersectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId request
	DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId(ctx context.Context, buildingId openapi_types.UUID, intersectionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSync request
	GetApiSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSyncWithBody request with any body
	PostApiSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiSync(ctx context.Context, body PostApiSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiBuildingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildings(ctx context.Context, body PostApiBuildingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiBuildingsBuildingId(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiBuildingsBuildingIdRequest(c.Server, buildingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiBuildingsBuildingIdWithBody(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiBuildingsBuildingIdRequestWithBody(c.Server, buildingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiBuildingsBuildingId(ctx context.Context, buildingId openapi_types.UUID, body PatchApiBuildingsBuildingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiBuildingsBuildingIdRequest(c.Server, buildingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithBody(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdFloorsFloorIdObjectsRequestWithBody(c.Server, buildingId, floorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdFloorsFloorIdObjects(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdFloorsFloorIdObjectsRequest(c.Server, buildingId, floorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequest(c.Server, buildingId, floorId, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithBody(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequestWithBody(c.Server, buildingId, floorId, objectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, body PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequest(c.Server, buildingId, floorId, objectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithBody(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsRequestWithBody(c.Server, buildingId, floorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdFloorsFloorIdPoligons(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsRequest(c.Server, buildingId, floorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithBody(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsRequestWithBody(c.Server, buildingId, floorId, pId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsRequest(c.Server, buildingId, floorId, pId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdRouteConnectionsWithBody(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdRouteConnectionsRequestWithBody(c.Server, buildingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdRouteConnections(ctx context.Context, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdRouteConnectionsRequest(c.Server, buildingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdRouteIntersectionsWithBody(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdRouteIntersectionsRequestWithBody(c.Server, buildingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiBuildingsBuildingIdRouteIntersections(ctx context.Context, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteIntersectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiBuildingsBuildingIdRouteIntersectionsRequest(c.Server, buildingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId(ctx context.Context, buildingId openapi_types.UUID, intersectionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdRequest(c.Server, buildingId, intersectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSyncRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSync(ctx context.Context, body PostApiSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiBuildingsRequest calls the generic PostApiBuildings builder with application/json body
func NewPostApiBuildingsRequest(server string, body PostApiBuildingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBuildingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiBuildingsRequestWithBody generates requests for PostApiBuildings with any type of body
func NewPostApiBuildingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiBuildingsBuildingIdRequest generates requests for DeleteApiBuildingsBuildingId
func NewDeleteApiBuildingsBuildingIdRequest(server string, buildingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiBuildingsBuildingIdRequest calls the generic PatchApiBuildingsBuildingId builder with application/json body
func NewPatchApiBuildingsBuildingIdRequest(server string, buildingId openapi_types.UUID, body PatchApiBuildingsBuildingIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiBuildingsBuildingIdRequestWithBody(server, buildingId, "application/json", bodyReader)
}

// NewPatchApiBuildingsBuildingIdRequestWithBody generates requests for PatchApiBuildingsBuildingId with any type of body
func NewPatchApiBuildingsBuildingIdRequestWithBody(server string, buildingId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBuildingsBuildingIdFloorsFloorIdObjectsRequest calls the generic PostApiBuildingsBuildingIdFloorsFloorIdObjects builder with application/json body
func NewPostApiBuildingsBuildingIdFloorsFloorIdObjectsRequest(server string, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdObjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBuildingsBuildingIdFloorsFloorIdObjectsRequestWithBody(server, buildingId, floorId, "application/json", bodyReader)
}

// NewPostApiBuildingsBuildingIdFloorsFloorIdObjectsRequestWithBody generates requests for PostApiBuildingsBuildingIdFloorsFloorIdObjects with any type of body
func NewPostApiBuildingsBuildingIdFloorsFloorIdObjectsRequestWithBody(server string, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "floor_id", runtime.ParamLocationPath, floorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/floors/%s/objects", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequest generates requests for DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId
func NewDeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequest(server string, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "floor_id", runtime.ParamLocationPath, floorId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "object_id", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/floors/%s/objects/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequest calls the generic PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId builder with application/json body
func NewPatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequest(server string, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, body PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequestWithBody(server, buildingId, floorId, objectId, "application/json", bodyReader)
}

// NewPatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequestWithBody generates requests for PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId with any type of body
func NewPatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdRequestWithBody(server string, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "floor_id", runtime.ParamLocationPath, floorId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "object_id", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/floors/%s/objects/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsRequest calls the generic PostApiBuildingsBuildingIdFloorsFloorIdPoligons builder with application/json body
func NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsRequest(server string, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsRequestWithBody(server, buildingId, floorId, "application/json", bodyReader)
}

// NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsRequestWithBody generates requests for PostApiBuildingsBuildingIdFloorsFloorIdPoligons with any type of body
func NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsRequestWithBody(server string, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "floor_id", runtime.ParamLocationPath, floorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/floors/%s/poligons", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsRequest calls the generic PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints builder with application/json body
func NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsRequest(server string, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsRequestWithBody(server, buildingId, floorId, pId, "application/json", bodyReader)
}

// NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsRequestWithBody generates requests for PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints with any type of body
func NewPostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsRequestWithBody(server string, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "floor_id", runtime.ParamLocationPath, floorId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "p_id", runtime.ParamLocationPath, pId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/floors/%s/poligons/%s/points", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBuildingsBuildingIdRouteConnectionsRequest calls the generic PostApiBuildingsBuildingIdRouteConnections builder with application/json body
func NewPostApiBuildingsBuildingIdRouteConnectionsRequest(server string, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteConnectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBuildingsBuildingIdRouteConnectionsRequestWithBody(server, buildingId, "application/json", bodyReader)
}

// NewPostApiBuildingsBuildingIdRouteConnectionsRequestWithBody generates requests for PostApiBuildingsBuildingIdRouteConnections with any type of body
func NewPostApiBuildingsBuildingIdRouteConnectionsRequestWithBody(server string, buildingId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/route/connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiBuildingsBuildingIdRouteIntersectionsRequest calls the generic PostApiBuildingsBuildingIdRouteIntersections builder with application/json body
func NewPostApiBuildingsBuildingIdRouteIntersectionsRequest(server string, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteIntersectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiBuildingsBuildingIdRouteIntersectionsRequestWithBody(server, buildingId, "application/json", bodyReader)
}

// NewPostApiBuildingsBuildingIdRouteIntersectionsRequestWithBody generates requests for PostApiBuildingsBuildingIdRouteIntersections with any type of body
func NewPostApiBuildingsBuildingIdRouteIntersectionsRequestWithBody(server string, buildingId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/route/intersections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdRequest generates requests for DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId
func NewDeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdRequest(server string, buildingId openapi_types.UUID, intersectionId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "building_id", runtime.ParamLocationPath, buildingId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "intersection_id", runtime.ParamLocationPath, intersectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/buildings/%s/route/intersections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSyncRequest generates requests for GetApiSync
func NewGetApiSyncRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSyncRequest calls the generic PostApiSync builder with application/json body
func NewPostApiSyncRequest(server string, body PostApiSyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiSyncRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiSyncRequestWithBody generates requests for PostApiSync with any type of body
func NewPostApiSyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiBuildingsWithBodyWithResponse request with any body
	PostApiBuildingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsResponse, error)

	PostApiBuildingsWithResponse(ctx context.Context, body PostApiBuildingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsResponse, error)

	// DeleteApiBuildingsBuildingIdWithResponse request
	DeleteApiBuildingsBuildingIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiBuildingsBuildingIdResponse, error)

	// PatchApiBuildingsBuildingIdWithBodyWithResponse request with any body
	PatchApiBuildingsBuildingIdWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiBuildingsBuildingIdResponse, error)

	PatchApiBuildingsBuildingIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, body PatchApiBuildingsBuildingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiBuildingsBuildingIdResponse, error)

	// PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithBodyWithResponse request with any body
	PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse, error)

	PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse, error)

	// DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithResponse request
	DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse, error)

	// PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithBodyWithResponse request with any body
	PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse, error)

	PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, body PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse, error)

	// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithBodyWithResponse request with any body
	PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse, error)

	PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse, error)

	// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithBodyWithResponse request with any body
	PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse, error)

	PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse, error)

	// PostApiBuildingsBuildingIdRouteConnectionsWithBodyWithResponse request with any body
	PostApiBuildingsBuildingIdRouteConnectionsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdRouteConnectionsResponse, error)

	PostApiBuildingsBuildingIdRouteConnectionsWithResponse(ctx context.Context, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdRouteConnectionsResponse, error)

	// PostApiBuildingsBuildingIdRouteIntersectionsWithBodyWithResponse request with any body
	PostApiBuildingsBuildingIdRouteIntersectionsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdRouteIntersectionsResponse, error)

	PostApiBuildingsBuildingIdRouteIntersectionsWithResponse(ctx context.Context, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteIntersectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdRouteIntersectionsResponse, error)

	// DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdWithResponse request
	DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, intersectionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse, error)

	// GetApiSyncWithResponse request
	GetApiSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSyncResponse, error)

	// PostApiSyncWithBodyWithResponse request with any body
	PostApiSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSyncResponse, error)

	PostApiSyncWithResponse(ctx context.Context, body PostApiSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSyncResponse, error)
}

type PostApiBuildingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Building
}

// Status returns HTTPResponse.Status
func (r PostApiBuildingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBuildingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiBuildingsBuildingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiBuildingsBuildingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiBuildingsBuildingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiBuildingsBuildingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Building
}

// Status returns HTTPResponse.Status
func (r PatchApiBuildingsBuildingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiBuildingsBuildingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Object
}

// Status returns HTTPResponse.Status
func (r PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Object
}

// Status returns HTTPResponse.Status
func (r PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Polygon
}

// Status returns HTTPResponse.Status
func (r PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]PolygonPoint
}

// Status returns HTTPResponse.Status
func (r PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBuildingsBuildingIdRouteConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Edge
}

// Status returns HTTPResponse.Status
func (r PostApiBuildingsBuildingIdRouteConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBuildingsBuildingIdRouteConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiBuildingsBuildingIdRouteIntersectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Node
}

// Status returns HTTPResponse.Status
func (r PostApiBuildingsBuildingIdRouteIntersectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiBuildingsBuildingIdRouteIntersectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SyncAllData
}

// Status returns HTTPResponse.Status
func (r GetApiSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiBuildingsWithBodyWithResponse request with arbitrary body returning *PostApiBuildingsResponse
func (c *ClientWithResponses) PostApiBuildingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsResponse, error) {
	rsp, err := c.PostApiBuildingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsResponse(rsp)
}

func (c *ClientWithResponses) PostApiBuildingsWithResponse(ctx context.Context, body PostApiBuildingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsResponse, error) {
	rsp, err := c.PostApiBuildings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsResponse(rsp)
}

// DeleteApiBuildingsBuildingIdWithResponse request returning *DeleteApiBuildingsBuildingIdResponse
func (c *ClientWithResponses) DeleteApiBuildingsBuildingIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiBuildingsBuildingIdResponse, error) {
	rsp, err := c.DeleteApiBuildingsBuildingId(ctx, buildingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiBuildingsBuildingIdResponse(rsp)
}

// PatchApiBuildingsBuildingIdWithBodyWithResponse request with arbitrary body returning *PatchApiBuildingsBuildingIdResponse
func (c *ClientWithResponses) PatchApiBuildingsBuildingIdWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiBuildingsBuildingIdResponse, error) {
	rsp, err := c.PatchApiBuildingsBuildingIdWithBody(ctx, buildingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiBuildingsBuildingIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiBuildingsBuildingIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, body PatchApiBuildingsBuildingIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiBuildingsBuildingIdResponse, error) {
	rsp, err := c.PatchApiBuildingsBuildingId(ctx, buildingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiBuildingsBuildingIdResponse(rsp)
}

// PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithBodyWithResponse request with arbitrary body returning *PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse
func (c *ClientWithResponses) PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithBody(ctx, buildingId, floorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse(rsp)
}

func (c *ClientWithResponses) PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdFloorsFloorIdObjects(ctx, buildingId, floorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse(rsp)
}

// DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithResponse request returning *DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse
func (c *ClientWithResponses) DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse, error) {
	rsp, err := c.DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(ctx, buildingId, floorId, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse(rsp)
}

// PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithBodyWithResponse request with arbitrary body returning *PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse
func (c *ClientWithResponses) PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse, error) {
	rsp, err := c.PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithBody(ctx, buildingId, floorId, objectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID, body PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse, error) {
	rsp, err := c.PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(ctx, buildingId, floorId, objectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse(rsp)
}

// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithBodyWithResponse request with arbitrary body returning *PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse
func (c *ClientWithResponses) PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithBody(ctx, buildingId, floorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse(rsp)
}

func (c *ClientWithResponses) PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdFloorsFloorIdPoligons(ctx, buildingId, floorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse(rsp)
}

// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithBodyWithResponse request with arbitrary body returning *PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse
func (c *ClientWithResponses) PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithBody(ctx, buildingId, floorId, pId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse(rsp)
}

func (c *ClientWithResponses) PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithResponse(ctx context.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID, body PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints(ctx, buildingId, floorId, pId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse(rsp)
}

// PostApiBuildingsBuildingIdRouteConnectionsWithBodyWithResponse request with arbitrary body returning *PostApiBuildingsBuildingIdRouteConnectionsResponse
func (c *ClientWithResponses) PostApiBuildingsBuildingIdRouteConnectionsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdRouteConnectionsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdRouteConnectionsWithBody(ctx, buildingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdRouteConnectionsResponse(rsp)
}

func (c *ClientWithResponses) PostApiBuildingsBuildingIdRouteConnectionsWithResponse(ctx context.Context, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdRouteConnectionsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdRouteConnections(ctx, buildingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdRouteConnectionsResponse(rsp)
}

// PostApiBuildingsBuildingIdRouteIntersectionsWithBodyWithResponse request with arbitrary body returning *PostApiBuildingsBuildingIdRouteIntersectionsResponse
func (c *ClientWithResponses) PostApiBuildingsBuildingIdRouteIntersectionsWithBodyWithResponse(ctx context.Context, buildingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdRouteIntersectionsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdRouteIntersectionsWithBody(ctx, buildingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdRouteIntersectionsResponse(rsp)
}

func (c *ClientWithResponses) PostApiBuildingsBuildingIdRouteIntersectionsWithResponse(ctx context.Context, buildingId openapi_types.UUID, body PostApiBuildingsBuildingIdRouteIntersectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiBuildingsBuildingIdRouteIntersectionsResponse, error) {
	rsp, err := c.PostApiBuildingsBuildingIdRouteIntersections(ctx, buildingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiBuildingsBuildingIdRouteIntersectionsResponse(rsp)
}

// DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdWithResponse request returning *DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse
func (c *ClientWithResponses) DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdWithResponse(ctx context.Context, buildingId openapi_types.UUID, intersectionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse, error) {
	rsp, err := c.DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId(ctx, buildingId, intersectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse(rsp)
}

// GetApiSyncWithResponse request returning *GetApiSyncResponse
func (c *ClientWithResponses) GetApiSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSyncResponse, error) {
	rsp, err := c.GetApiSync(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSyncResponse(rsp)
}

// PostApiSyncWithBodyWithResponse request with arbitrary body returning *PostApiSyncResponse
func (c *ClientWithResponses) PostApiSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSyncResponse, error) {
	rsp, err := c.PostApiSyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSyncResponse(rsp)
}

func (c *ClientWithResponses) PostApiSyncWithResponse(ctx context.Context, body PostApiSyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSyncResponse, error) {
	rsp, err := c.PostApiSync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSyncResponse(rsp)
}

// ParsePostApiBuildingsResponse parses an HTTP response from a PostApiBuildingsWithResponse call
func ParsePostApiBuildingsResponse(rsp *http.Response) (*PostApiBuildingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBuildingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Building
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiBuildingsBuildingIdResponse parses an HTTP response from a DeleteApiBuildingsBuildingIdWithResponse call
func ParseDeleteApiBuildingsBuildingIdResponse(rsp *http.Response) (*DeleteApiBuildingsBuildingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiBuildingsBuildingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiBuildingsBuildingIdResponse parses an HTTP response from a PatchApiBuildingsBuildingIdWithResponse call
func ParsePatchApiBuildingsBuildingIdResponse(rsp *http.Response) (*PatchApiBuildingsBuildingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiBuildingsBuildingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Building
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse parses an HTTP response from a PostApiBuildingsBuildingIdFloorsFloorIdObjectsWithResponse call
func ParsePostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse(rsp *http.Response) (*PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBuildingsBuildingIdFloorsFloorIdObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse parses an HTTP response from a DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithResponse call
func ParseDeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse(rsp *http.Response) (*DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse parses an HTTP response from a PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdWithResponse call
func ParsePatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse(rsp *http.Response) (*PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse parses an HTTP response from a PostApiBuildingsBuildingIdFloorsFloorIdPoligonsWithResponse call
func ParsePostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse(rsp *http.Response) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBuildingsBuildingIdFloorsFloorIdPoligonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Polygon
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse parses an HTTP response from a PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsWithResponse call
func ParsePostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse(rsp *http.Response) (*PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []PolygonPoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostApiBuildingsBuildingIdRouteConnectionsResponse parses an HTTP response from a PostApiBuildingsBuildingIdRouteConnectionsWithResponse call
func ParsePostApiBuildingsBuildingIdRouteConnectionsResponse(rsp *http.Response) (*PostApiBuildingsBuildingIdRouteConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBuildingsBuildingIdRouteConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Edge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostApiBuildingsBuildingIdRouteIntersectionsResponse parses an HTTP response from a PostApiBuildingsBuildingIdRouteIntersectionsWithResponse call
func ParsePostApiBuildingsBuildingIdRouteIntersectionsResponse(rsp *http.Response) (*PostApiBuildingsBuildingIdRouteIntersectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiBuildingsBuildingIdRouteIntersectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse parses an HTTP response from a DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdWithResponse call
func ParseDeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse(rsp *http.Response) (*DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiSyncResponse parses an HTTP response from a GetApiSyncWithResponse call
func ParseGetApiSyncResponse(rsp *http.Response) (*GetApiSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SyncAllData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiSyncResponse parses an HTTP response from a PostApiSyncWithResponse call
func ParsePostApiSyncResponse(rsp *http.Response) (*PostApiSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new building
	// (POST /api/buildings)
	PostApiBuildings(c *gin.Context)
	// Delete a building
	// (DELETE /api/buildings/{building_id})
	DeleteApiBuildingsBuildingId(c *gin.Context, buildingId openapi_types.UUID)
	// Update an existing building
	// (PATCH /api/buildings/{building_id})
	PatchApiBuildingsBuildingId(c *gin.Context, buildingId openapi_types.UUID)
	// Create a new object on a floor
	// (POST /api/buildings/{building_id}/floors/{floor_id}/objects)
	PostApiBuildingsBuildingIdFloorsFloorIdObjects(c *gin.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID)
	// Delete an object
	// (DELETE /api/buildings/{building_id}/floors/{floor_id}/objects/{object_id})
	DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(c *gin.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID)
	// Update an existing object
	// (PATCH /api/buildings/{building_id}/floors/{floor_id}/objects/{object_id})
	PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(c *gin.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, objectId openapi_types.UUID)
	// Create a polygon on a floor
	// (POST /api/buildings/{building_id}/floors/{floor_id}/poligons)
	PostApiBuildingsBuildingIdFloorsFloorIdPoligons(c *gin.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID)
	// Add points to a polygon
	// (POST /api/buildings/{building_id}/floors/{floor_id}/poligons/{p_id}/points)
	PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints(c *gin.Context, buildingId openapi_types.UUID, floorId openapi_types.UUID, pId openapi_types.UUID)
	// Add a new connection (edge)
	// (POST /api/buildings/{building_id}/route/connections)
	PostApiBuildingsBuildingIdRouteConnections(c *gin.Context, buildingId openapi_types.UUID)
	// Add a new intersection node
	// (POST /api/buildings/{building_id}/route/intersections)
	PostApiBuildingsBuildingIdRouteIntersections(c *gin.Context, buildingId openapi_types.UUID)
	// Delete an intersection
	// (DELETE /api/buildings/{building_id}/route/intersections/{intersection_id})
	DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId(c *gin.Context, buildingId openapi_types.UUID, intersectionId openapi_types.UUID)
	// Retrieve the entire database as sync payload
	// (GET /api/sync)
	GetApiSync(c *gin.Context)
	// Synchronize the entire database
	// (POST /api/sync)
	PostApiSync(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiBuildings operation middleware
func (siw *ServerInterfaceWrapper) PostApiBuildings(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiBuildings(c)
}

// DeleteApiBuildingsBuildingId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiBuildingsBuildingId(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiBuildingsBuildingId(c, buildingId)
}

// PatchApiBuildingsBuildingId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiBuildingsBuildingId(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchApiBuildingsBuildingId(c, buildingId)
}

// PostApiBuildingsBuildingIdFloorsFloorIdObjects operation middleware
func (siw *ServerInterfaceWrapper) PostApiBuildingsBuildingIdFloorsFloorIdObjects(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "floor_id" -------------
	var floorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "floor_id", c.Param("floor_id"), &floorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter floor_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiBuildingsBuildingIdFloorsFloorIdObjects(c, buildingId, floorId)
}

// DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "floor_id" -------------
	var floorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "floor_id", c.Param("floor_id"), &floorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter floor_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "object_id" -------------
	var objectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "object_id", c.Param("object_id"), &objectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(c, buildingId, floorId, objectId)
}

// PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId operation middleware
func (siw *ServerInterfaceWrapper) PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "floor_id" -------------
	var floorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "floor_id", c.Param("floor_id"), &floorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter floor_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "object_id" -------------
	var objectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "object_id", c.Param("object_id"), &objectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter object_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId(c, buildingId, floorId, objectId)
}

// PostApiBuildingsBuildingIdFloorsFloorIdPoligons operation middleware
func (siw *ServerInterfaceWrapper) PostApiBuildingsBuildingIdFloorsFloorIdPoligons(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "floor_id" -------------
	var floorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "floor_id", c.Param("floor_id"), &floorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter floor_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiBuildingsBuildingIdFloorsFloorIdPoligons(c, buildingId, floorId)
}

// PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints operation middleware
func (siw *ServerInterfaceWrapper) PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "floor_id" -------------
	var floorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "floor_id", c.Param("floor_id"), &floorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter floor_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "p_id" -------------
	var pId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "p_id", c.Param("p_id"), &pId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter p_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints(c, buildingId, floorId, pId)
}

// PostApiBuildingsBuildingIdRouteConnections operation middleware
func (siw *ServerInterfaceWrapper) PostApiBuildingsBuildingIdRouteConnections(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiBuildingsBuildingIdRouteConnections(c, buildingId)
}

// PostApiBuildingsBuildingIdRouteIntersections operation middleware
func (siw *ServerInterfaceWrapper) PostApiBuildingsBuildingIdRouteIntersections(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiBuildingsBuildingIdRouteIntersections(c, buildingId)
}

// DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "building_id" -------------
	var buildingId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "building_id", c.Param("building_id"), &buildingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter building_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "intersection_id" -------------
	var intersectionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "intersection_id", c.Param("intersection_id"), &intersectionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter intersection_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId(c, buildingId, intersectionId)
}

// GetApiSync operation middleware
func (siw *ServerInterfaceWrapper) GetApiSync(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiSync(c)
}

// PostApiSync operation middleware
func (siw *ServerInterfaceWrapper) PostApiSync(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiSync(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/buildings", wrapper.PostApiBuildings)
	router.DELETE(options.BaseURL+"/api/buildings/:building_id", wrapper.DeleteApiBuildingsBuildingId)
	router.PATCH(options.BaseURL+"/api/buildings/:building_id", wrapper.PatchApiBuildingsBuildingId)
	router.POST(options.BaseURL+"/api/buildings/:building_id/floors/:floor_id/objects", wrapper.PostApiBuildingsBuildingIdFloorsFloorIdObjects)
	router.DELETE(options.BaseURL+"/api/buildings/:building_id/floors/:floor_id/objects/:object_id", wrapper.DeleteApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId)
	router.PATCH(options.BaseURL+"/api/buildings/:building_id/floors/:floor_id/objects/:object_id", wrapper.PatchApiBuildingsBuildingIdFloorsFloorIdObjectsObjectId)
	router.POST(options.BaseURL+"/api/buildings/:building_id/floors/:floor_id/poligons", wrapper.PostApiBuildingsBuildingIdFloorsFloorIdPoligons)
	router.POST(options.BaseURL+"/api/buildings/:building_id/floors/:floor_id/poligons/:p_id/points", wrapper.PostApiBuildingsBuildingIdFloorsFloorIdPoligonsPIdPoints)
	router.POST(options.BaseURL+"/api/buildings/:building_id/route/connections", wrapper.PostApiBuildingsBuildingIdRouteConnections)
	router.POST(options.BaseURL+"/api/buildings/:building_id/route/intersections", wrapper.PostApiBuildingsBuildingIdRouteIntersections)
	router.DELETE(options.BaseURL+"/api/buildings/:building_id/route/intersections/:intersection_id", wrapper.DeleteApiBuildingsBuildingIdRouteIntersectionsIntersectionId)
	router.GET(options.BaseURL+"/api/sync", wrapper.GetApiSync)
	router.POST(options.BaseURL+"/api/sync", wrapper.PostApiSync)
}
