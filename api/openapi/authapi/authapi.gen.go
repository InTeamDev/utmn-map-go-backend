// Package authapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package authapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// PostApiAuthSaveTgUserJSONBody defines parameters for PostApiAuthSaveTgUser.
type PostApiAuthSaveTgUserJSONBody struct {
	TgId       int64  `json:"tg_id"`
	TgUsername string `json:"tg_username"`
}

// PostApiAuthSendCodeJSONBody defines parameters for PostApiAuthSendCode.
type PostApiAuthSendCodeJSONBody struct {
	TgUsername string `json:"tg_username"`
}

// PostApiAuthVerifyJSONBody defines parameters for PostApiAuthVerify.
type PostApiAuthVerifyJSONBody struct {
	Code       string `json:"code"`
	TgUsername string `json:"tg_username"`
}

// PostApiAuthSaveTgUserJSONRequestBody defines body for PostApiAuthSaveTgUser for application/json ContentType.
type PostApiAuthSaveTgUserJSONRequestBody PostApiAuthSaveTgUserJSONBody

// PostApiAuthSendCodeJSONRequestBody defines body for PostApiAuthSendCode for application/json ContentType.
type PostApiAuthSendCodeJSONRequestBody PostApiAuthSendCodeJSONBody

// PostApiAuthVerifyJSONRequestBody defines body for PostApiAuthVerify for application/json ContentType.
type PostApiAuthVerifyJSONRequestBody PostApiAuthVerifyJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiAuthLogout request
	PostApiAuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthRefresh request
	PostApiAuthRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthSaveTgUserWithBody request with any body
	PostApiAuthSaveTgUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthSaveTgUser(ctx context.Context, body PostApiAuthSaveTgUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthSendCodeWithBody request with any body
	PostApiAuthSendCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthSendCode(ctx context.Context, body PostApiAuthSendCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthVerifyWithBody request with any body
	PostApiAuthVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthVerify(ctx context.Context, body PostApiAuthVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiAuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRefresh(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRefreshRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthSaveTgUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthSaveTgUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthSaveTgUser(ctx context.Context, body PostApiAuthSaveTgUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthSaveTgUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthSendCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthSendCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthSendCode(ctx context.Context, body PostApiAuthSendCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthSendCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthVerify(ctx context.Context, body PostApiAuthVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiAuthLogoutRequest generates requests for PostApiAuthLogout
func NewPostApiAuthLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiAuthRefreshRequest generates requests for PostApiAuthRefresh
func NewPostApiAuthRefreshRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiAuthSaveTgUserRequest calls the generic PostApiAuthSaveTgUser builder with application/json body
func NewPostApiAuthSaveTgUserRequest(server string, body PostApiAuthSaveTgUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthSaveTgUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthSaveTgUserRequestWithBody generates requests for PostApiAuthSaveTgUser with any type of body
func NewPostApiAuthSaveTgUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/save_tg_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthSendCodeRequest calls the generic PostApiAuthSendCode builder with application/json body
func NewPostApiAuthSendCodeRequest(server string, body PostApiAuthSendCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthSendCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthSendCodeRequestWithBody generates requests for PostApiAuthSendCode with any type of body
func NewPostApiAuthSendCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/send_code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthVerifyRequest calls the generic PostApiAuthVerify builder with application/json body
func NewPostApiAuthVerifyRequest(server string, body PostApiAuthVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthVerifyRequestWithBody generates requests for PostApiAuthVerify with any type of body
func NewPostApiAuthVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiAuthLogoutWithResponse request
	PostApiAuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error)

	// PostApiAuthRefreshWithResponse request
	PostApiAuthRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthRefreshResponse, error)

	// PostApiAuthSaveTgUserWithBodyWithResponse request with any body
	PostApiAuthSaveTgUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthSaveTgUserResponse, error)

	PostApiAuthSaveTgUserWithResponse(ctx context.Context, body PostApiAuthSaveTgUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthSaveTgUserResponse, error)

	// PostApiAuthSendCodeWithBodyWithResponse request with any body
	PostApiAuthSendCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthSendCodeResponse, error)

	PostApiAuthSendCodeWithResponse(ctx context.Context, body PostApiAuthSendCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthSendCodeResponse, error)

	// PostApiAuthVerifyWithBodyWithResponse request with any body
	PostApiAuthVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthVerifyResponse, error)

	PostApiAuthVerifyWithResponse(ctx context.Context, body PostApiAuthVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthVerifyResponse, error)
}

type PostApiAuthLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessToken *string `json:"access_token,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiAuthRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthSaveTgUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthSaveTgUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthSaveTgUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthSendCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ExpiresAt *time.Time `json:"expires_at,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiAuthSendCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthSendCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessToken *string `json:"access_token,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiAuthVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiAuthLogoutWithResponse request returning *PostApiAuthLogoutResponse
func (c *ClientWithResponses) PostApiAuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error) {
	rsp, err := c.PostApiAuthLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLogoutResponse(rsp)
}

// PostApiAuthRefreshWithResponse request returning *PostApiAuthRefreshResponse
func (c *ClientWithResponses) PostApiAuthRefreshWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiAuthRefreshResponse, error) {
	rsp, err := c.PostApiAuthRefresh(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRefreshResponse(rsp)
}

// PostApiAuthSaveTgUserWithBodyWithResponse request with arbitrary body returning *PostApiAuthSaveTgUserResponse
func (c *ClientWithResponses) PostApiAuthSaveTgUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthSaveTgUserResponse, error) {
	rsp, err := c.PostApiAuthSaveTgUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthSaveTgUserResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthSaveTgUserWithResponse(ctx context.Context, body PostApiAuthSaveTgUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthSaveTgUserResponse, error) {
	rsp, err := c.PostApiAuthSaveTgUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthSaveTgUserResponse(rsp)
}

// PostApiAuthSendCodeWithBodyWithResponse request with arbitrary body returning *PostApiAuthSendCodeResponse
func (c *ClientWithResponses) PostApiAuthSendCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthSendCodeResponse, error) {
	rsp, err := c.PostApiAuthSendCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthSendCodeResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthSendCodeWithResponse(ctx context.Context, body PostApiAuthSendCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthSendCodeResponse, error) {
	rsp, err := c.PostApiAuthSendCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthSendCodeResponse(rsp)
}

// PostApiAuthVerifyWithBodyWithResponse request with arbitrary body returning *PostApiAuthVerifyResponse
func (c *ClientWithResponses) PostApiAuthVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthVerifyResponse, error) {
	rsp, err := c.PostApiAuthVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthVerifyWithResponse(ctx context.Context, body PostApiAuthVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthVerifyResponse, error) {
	rsp, err := c.PostApiAuthVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthVerifyResponse(rsp)
}

// ParsePostApiAuthLogoutResponse parses an HTTP response from a PostApiAuthLogoutWithResponse call
func ParsePostApiAuthLogoutResponse(rsp *http.Response) (*PostApiAuthLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiAuthRefreshResponse parses an HTTP response from a PostApiAuthRefreshWithResponse call
func ParsePostApiAuthRefreshResponse(rsp *http.Response) (*PostApiAuthRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessToken *string `json:"access_token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiAuthSaveTgUserResponse parses an HTTP response from a PostApiAuthSaveTgUserWithResponse call
func ParsePostApiAuthSaveTgUserResponse(rsp *http.Response) (*PostApiAuthSaveTgUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthSaveTgUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiAuthSendCodeResponse parses an HTTP response from a PostApiAuthSendCodeWithResponse call
func ParsePostApiAuthSendCodeResponse(rsp *http.Response) (*PostApiAuthSendCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthSendCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ExpiresAt *time.Time `json:"expires_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiAuthVerifyResponse parses an HTTP response from a PostApiAuthVerifyWithResponse call
func ParsePostApiAuthVerifyResponse(rsp *http.Response) (*PostApiAuthVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessToken *string `json:"access_token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log out the current user by invalidating tokens
	// (POST /api/auth/logout)
	PostApiAuthLogout(c *gin.Context)
	// Refresh access token using refresh cookie
	// (POST /api/auth/refresh)
	PostApiAuthRefresh(c *gin.Context)
	// Register or save a Telegram user (admin only)
	// (POST /api/auth/save_tg_user)
	PostApiAuthSaveTgUser(c *gin.Context)
	// Send a login code to a Telegram user
	// (POST /api/auth/send_code)
	PostApiAuthSendCode(c *gin.Context)
	// Verify a login code and issue tokens
	// (POST /api/auth/verify)
	PostApiAuthVerify(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuthLogout(c)
}

// PostApiAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthRefresh(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuthRefresh(c)
}

// PostApiAuthSaveTgUser operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthSaveTgUser(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuthSaveTgUser(c)
}

// PostApiAuthSendCode operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthSendCode(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuthSendCode(c)
}

// PostApiAuthVerify operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthVerify(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuthVerify(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/auth/logout", wrapper.PostApiAuthLogout)
	router.POST(options.BaseURL+"/api/auth/refresh", wrapper.PostApiAuthRefresh)
	router.POST(options.BaseURL+"/api/auth/save_tg_user", wrapper.PostApiAuthSaveTgUser)
	router.POST(options.BaseURL+"/api/auth/send_code", wrapper.PostApiAuthSendCode)
	router.POST(options.BaseURL+"/api/auth/verify", wrapper.PostApiAuthVerify)
}
