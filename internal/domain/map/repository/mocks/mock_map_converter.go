// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_map_converter.go -package=mocks -source=repository.go MapConverter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	entities "github.com/InTeamDev/utmn-map-go-backend/internal/domain/map/entities"
	sqlc "github.com/InTeamDev/utmn-map-go-backend/internal/domain/map/repository/sqlc"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMapConverter is a mock of MapConverter interface.
type MockMapConverter struct {
	ctrl     *gomock.Controller
	recorder *MockMapConverterMockRecorder
	isgomock struct{}
}

// MockMapConverterMockRecorder is the mock recorder for MockMapConverter.
type MockMapConverterMockRecorder struct {
	mock *MockMapConverter
}

// NewMockMapConverter creates a new mock instance.
func NewMockMapConverter(ctrl *gomock.Controller) *MockMapConverter {
	mock := &MockMapConverter{ctrl: ctrl}
	mock.recorder = &MockMapConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapConverter) EXPECT() *MockMapConverterMockRecorder {
	return m.recorder
}

// BuildingsSqlcToEntity mocks base method.
func (m *MockMapConverter) BuildingsSqlcToEntity(buildings []sqlc.Building) []entities.Building {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildingsSqlcToEntity", buildings)
	ret0, _ := ret[0].([]entities.Building)
	return ret0
}

// BuildingsSqlcToEntity indicates an expected call of BuildingsSqlcToEntity.
func (mr *MockMapConverterMockRecorder) BuildingsSqlcToEntity(buildings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildingsSqlcToEntity", reflect.TypeOf((*MockMapConverter)(nil).BuildingsSqlcToEntity), buildings)
}

// DoorsSqlcToEntityMap mocks base method.
func (m *MockMapConverter) DoorsSqlcToEntityMap(doors []sqlc.Door) map[uuid.UUID][]entities.Door {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoorsSqlcToEntityMap", doors)
	ret0, _ := ret[0].(map[uuid.UUID][]entities.Door)
	return ret0
}

// DoorsSqlcToEntityMap indicates an expected call of DoorsSqlcToEntityMap.
func (mr *MockMapConverterMockRecorder) DoorsSqlcToEntityMap(doors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoorsSqlcToEntityMap", reflect.TypeOf((*MockMapConverter)(nil).DoorsSqlcToEntityMap), doors)
}

// FloorBackgroundSqlcToEntityMany mocks base method.
func (m *MockMapConverter) FloorBackgroundSqlcToEntityMany(rows []sqlc.GetFloorBackgroundRow) []entities.FloorBackgroundElement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FloorBackgroundSqlcToEntityMany", rows)
	ret0, _ := ret[0].([]entities.FloorBackgroundElement)
	return ret0
}

// FloorBackgroundSqlcToEntityMany indicates an expected call of FloorBackgroundSqlcToEntityMany.
func (mr *MockMapConverterMockRecorder) FloorBackgroundSqlcToEntityMany(rows any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorBackgroundSqlcToEntityMany", reflect.TypeOf((*MockMapConverter)(nil).FloorBackgroundSqlcToEntityMany), rows)
}

// FloorSqlcToEntity mocks base method.
func (m *MockMapConverter) FloorSqlcToEntity(f sqlc.Floor) entities.Floor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FloorSqlcToEntity", f)
	ret0, _ := ret[0].(entities.Floor)
	return ret0
}

// FloorSqlcToEntity indicates an expected call of FloorSqlcToEntity.
func (mr *MockMapConverterMockRecorder) FloorSqlcToEntity(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorSqlcToEntity", reflect.TypeOf((*MockMapConverter)(nil).FloorSqlcToEntity), f)
}

// FloorsSqlcToEntity mocks base method.
func (m *MockMapConverter) FloorsSqlcToEntity(floors []sqlc.Floor) []entities.Floor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FloorsSqlcToEntity", floors)
	ret0, _ := ret[0].([]entities.Floor)
	return ret0
}

// FloorsSqlcToEntity indicates an expected call of FloorsSqlcToEntity.
func (mr *MockMapConverterMockRecorder) FloorsSqlcToEntity(floors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloorsSqlcToEntity", reflect.TypeOf((*MockMapConverter)(nil).FloorsSqlcToEntity), floors)
}

// GetDoorsSqlcToEntity mocks base method.
func (m *MockMapConverter) GetDoorsSqlcToEntity(doors []sqlc.GetDoorsByBuildingRow) []entities.GetDoorsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoorsSqlcToEntity", doors)
	ret0, _ := ret[0].([]entities.GetDoorsResponse)
	return ret0
}

// GetDoorsSqlcToEntity indicates an expected call of GetDoorsSqlcToEntity.
func (mr *MockMapConverterMockRecorder) GetDoorsSqlcToEntity(doors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoorsSqlcToEntity", reflect.TypeOf((*MockMapConverter)(nil).GetDoorsSqlcToEntity), doors)
}

// ObjectSqlcToEntity mocks base method.
func (m *MockMapConverter) ObjectSqlcToEntity(object sqlc.GetObjectsByBuildingRow, doors []entities.Door) entities.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectSqlcToEntity", object, doors)
	ret0, _ := ret[0].(entities.Object)
	return ret0
}

// ObjectSqlcToEntity indicates an expected call of ObjectSqlcToEntity.
func (mr *MockMapConverterMockRecorder) ObjectSqlcToEntity(object, doors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectSqlcToEntity", reflect.TypeOf((*MockMapConverter)(nil).ObjectSqlcToEntity), object, doors)
}

// ObjectTypeSqlcToEntity mocks base method.
func (m *MockMapConverter) ObjectTypeSqlcToEntity(objectType sqlc.ObjectType) entities.ObjectTypeInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectTypeSqlcToEntity", objectType)
	ret0, _ := ret[0].(entities.ObjectTypeInfo)
	return ret0
}

// ObjectTypeSqlcToEntity indicates an expected call of ObjectTypeSqlcToEntity.
func (mr *MockMapConverterMockRecorder) ObjectTypeSqlcToEntity(objectType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectTypeSqlcToEntity", reflect.TypeOf((*MockMapConverter)(nil).ObjectTypeSqlcToEntity), objectType)
}

// ObjectTypesSqlcToEntity mocks base method.
func (m *MockMapConverter) ObjectTypesSqlcToEntity(objectTypes []sqlc.ObjectType) []entities.ObjectTypeInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectTypesSqlcToEntity", objectTypes)
	ret0, _ := ret[0].([]entities.ObjectTypeInfo)
	return ret0
}

// ObjectTypesSqlcToEntity indicates an expected call of ObjectTypesSqlcToEntity.
func (mr *MockMapConverterMockRecorder) ObjectTypesSqlcToEntity(objectTypes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectTypesSqlcToEntity", reflect.TypeOf((*MockMapConverter)(nil).ObjectTypesSqlcToEntity), objectTypes)
}

// ObjectsSqlcToEntityByBuilding mocks base method.
func (m *MockMapConverter) ObjectsSqlcToEntityByBuilding(objects []sqlc.GetObjectsByBuildingRow, doors map[uuid.UUID][]entities.Door) []entities.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectsSqlcToEntityByBuilding", objects, doors)
	ret0, _ := ret[0].([]entities.Object)
	return ret0
}

// ObjectsSqlcToEntityByBuilding indicates an expected call of ObjectsSqlcToEntityByBuilding.
func (mr *MockMapConverterMockRecorder) ObjectsSqlcToEntityByBuilding(objects, doors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectsSqlcToEntityByBuilding", reflect.TypeOf((*MockMapConverter)(nil).ObjectsSqlcToEntityByBuilding), objects, doors)
}

// SlicePolygonPointSqlcToEntity mocks base method.
func (m *MockMapConverter) SlicePolygonPointSqlcToEntity(rows []sqlc.ListPolygonPointsByPolygonIDRow) []entities.PolygonPoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlicePolygonPointSqlcToEntity", rows)
	ret0, _ := ret[0].([]entities.PolygonPoint)
	return ret0
}

// SlicePolygonPointSqlcToEntity indicates an expected call of SlicePolygonPointSqlcToEntity.
func (mr *MockMapConverterMockRecorder) SlicePolygonPointSqlcToEntity(rows any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlicePolygonPointSqlcToEntity", reflect.TypeOf((*MockMapConverter)(nil).SlicePolygonPointSqlcToEntity), rows)
}

// SlicePolygonSqlcToEntity mocks base method.
func (m *MockMapConverter) SlicePolygonSqlcToEntity(rows []sqlc.FloorPolygon) []entities.Polygon {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlicePolygonSqlcToEntity", rows)
	ret0, _ := ret[0].([]entities.Polygon)
	return ret0
}

// SlicePolygonSqlcToEntity indicates an expected call of SlicePolygonSqlcToEntity.
func (mr *MockMapConverterMockRecorder) SlicePolygonSqlcToEntity(rows any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlicePolygonSqlcToEntity", reflect.TypeOf((*MockMapConverter)(nil).SlicePolygonSqlcToEntity), rows)
}

// ToSqlNullInt32 mocks base method.
func (m *MockMapConverter) ToSqlNullInt32(i *int32) sql.NullInt32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSqlNullInt32", i)
	ret0, _ := ret[0].(sql.NullInt32)
	return ret0
}

// ToSqlNullInt32 indicates an expected call of ToSqlNullInt32.
func (mr *MockMapConverterMockRecorder) ToSqlNullInt32(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSqlNullInt32", reflect.TypeOf((*MockMapConverter)(nil).ToSqlNullInt32), i)
}

// ToSqlNullString mocks base method.
func (m *MockMapConverter) ToSqlNullString(s *string) sql.NullString {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSqlNullString", s)
	ret0, _ := ret[0].(sql.NullString)
	return ret0
}

// ToSqlNullString indicates an expected call of ToSqlNullString.
func (mr *MockMapConverterMockRecorder) ToSqlNullString(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSqlNullString", reflect.TypeOf((*MockMapConverter)(nil).ToSqlNullString), s)
}
