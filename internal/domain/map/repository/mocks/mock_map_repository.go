// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/InTeamDev/utmn-map-go-backend/internal/domain/map/service (interfaces: MapRepository)
//
// Generated by this command:
//
//	mockgen -destination=../repository/mocks/mock_map_repository.go -package=mocks github.com/InTeamDev/utmn-map-go-backend/internal/domain/map/service MapRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/InTeamDev/utmn-map-go-backend/internal/domain/map/entities"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMapRepository is a mock of MapRepository interface.
type MockMapRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMapRepositoryMockRecorder
	isgomock struct{}
}

// MockMapRepositoryMockRecorder is the mock recorder for MockMapRepository.
type MockMapRepositoryMockRecorder struct {
	mock *MockMapRepository
}

// NewMockMapRepository creates a new mock instance.
func NewMockMapRepository(ctrl *gomock.Controller) *MockMapRepository {
	mock := &MockMapRepository{ctrl: ctrl}
	mock.recorder = &MockMapRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapRepository) EXPECT() *MockMapRepositoryMockRecorder {
	return m.recorder
}

// CreateBuilding mocks base method.
func (m *MockMapRepository) CreateBuilding(ctx context.Context, input entities.CreateBuildingInput) (entities.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuilding", ctx, input)
	ret0, _ := ret[0].(entities.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuilding indicates an expected call of CreateBuilding.
func (mr *MockMapRepositoryMockRecorder) CreateBuilding(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuilding", reflect.TypeOf((*MockMapRepository)(nil).CreateBuilding), ctx, input)
}

// CreateBuildingWithID mocks base method.
func (m *MockMapRepository) CreateBuildingWithID(ctx context.Context, b entities.Building) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuildingWithID", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBuildingWithID indicates an expected call of CreateBuildingWithID.
func (mr *MockMapRepositoryMockRecorder) CreateBuildingWithID(ctx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuildingWithID", reflect.TypeOf((*MockMapRepository)(nil).CreateBuildingWithID), ctx, b)
}

// CreateDoor mocks base method.
func (m *MockMapRepository) CreateDoor(ctx context.Context, objectID uuid.UUID, door entities.Door) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoor", ctx, objectID, door)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDoor indicates an expected call of CreateDoor.
func (mr *MockMapRepositoryMockRecorder) CreateDoor(ctx, objectID, door any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoor", reflect.TypeOf((*MockMapRepository)(nil).CreateDoor), ctx, objectID, door)
}

// CreateFloor mocks base method.
func (m *MockMapRepository) CreateFloor(ctx context.Context, buildingID uuid.UUID, floor entities.Floor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFloor", ctx, buildingID, floor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFloor indicates an expected call of CreateFloor.
func (mr *MockMapRepositoryMockRecorder) CreateFloor(ctx, buildingID, floor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFloor", reflect.TypeOf((*MockMapRepository)(nil).CreateFloor), ctx, buildingID, floor)
}

// CreateObject mocks base method.
func (m *MockMapRepository) CreateObject(ctx context.Context, floorID uuid.UUID, input entities.CreateObjectInput) (entities.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", ctx, floorID, input)
	ret0, _ := ret[0].(entities.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockMapRepositoryMockRecorder) CreateObject(ctx, floorID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockMapRepository)(nil).CreateObject), ctx, floorID, input)
}

// CreatePolygon mocks base method.
func (m *MockMapRepository) CreatePolygon(ctx context.Context, floorID uuid.UUID, label string, zIndex int32) (entities.Polygon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolygon", ctx, floorID, label, zIndex)
	ret0, _ := ret[0].(entities.Polygon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolygon indicates an expected call of CreatePolygon.
func (mr *MockMapRepositoryMockRecorder) CreatePolygon(ctx, floorID, label, zIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolygon", reflect.TypeOf((*MockMapRepository)(nil).CreatePolygon), ctx, floorID, label, zIndex)
}

// CreatePolygonPoint mocks base method.
func (m *MockMapRepository) CreatePolygonPoint(ctx context.Context, polygonID uuid.UUID, order int32, x, y float64) (entities.PolygonPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolygonPoint", ctx, polygonID, order, x, y)
	ret0, _ := ret[0].(entities.PolygonPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolygonPoint indicates an expected call of CreatePolygonPoint.
func (mr *MockMapRepositoryMockRecorder) CreatePolygonPoint(ctx, polygonID, order, x, y any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolygonPoint", reflect.TypeOf((*MockMapRepository)(nil).CreatePolygonPoint), ctx, polygonID, order, x, y)
}

// CreatePolygonWithID mocks base method.
func (m *MockMapRepository) CreatePolygonWithID(ctx context.Context, polygon entities.Polygon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolygonWithID", ctx, polygon)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePolygonWithID indicates an expected call of CreatePolygonWithID.
func (mr *MockMapRepositoryMockRecorder) CreatePolygonWithID(ctx, polygon any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolygonWithID", reflect.TypeOf((*MockMapRepository)(nil).CreatePolygonWithID), ctx, polygon)
}

// DeleteBuilding mocks base method.
func (m *MockMapRepository) DeleteBuilding(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuilding", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBuilding indicates an expected call of DeleteBuilding.
func (mr *MockMapRepositoryMockRecorder) DeleteBuilding(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuilding", reflect.TypeOf((*MockMapRepository)(nil).DeleteBuilding), ctx, id)
}

// DeleteObject mocks base method.
func (m *MockMapRepository) DeleteObject(ctx context.Context, objectID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, objectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockMapRepositoryMockRecorder) DeleteObject(ctx, objectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockMapRepository)(nil).DeleteObject), ctx, objectID)
}

// GetBuildingByID mocks base method.
func (m *MockMapRepository) GetBuildingByID(ctx context.Context, id uuid.UUID) (entities.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildingByID", ctx, id)
	ret0, _ := ret[0].(entities.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildingByID indicates an expected call of GetBuildingByID.
func (mr *MockMapRepositoryMockRecorder) GetBuildingByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildingByID", reflect.TypeOf((*MockMapRepository)(nil).GetBuildingByID), ctx, id)
}

// GetBuildings mocks base method.
func (m *MockMapRepository) GetBuildings(ctx context.Context) ([]entities.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildings", ctx)
	ret0, _ := ret[0].([]entities.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildings indicates an expected call of GetBuildings.
func (mr *MockMapRepositoryMockRecorder) GetBuildings(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildings", reflect.TypeOf((*MockMapRepository)(nil).GetBuildings), ctx)
}

// GetDoors mocks base method.
func (m *MockMapRepository) GetDoors(ctx context.Context, buildID uuid.UUID) ([]entities.GetDoorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoors", ctx, buildID)
	ret0, _ := ret[0].([]entities.GetDoorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoors indicates an expected call of GetDoors.
func (mr *MockMapRepositoryMockRecorder) GetDoors(ctx, buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoors", reflect.TypeOf((*MockMapRepository)(nil).GetDoors), ctx, buildID)
}

// GetFloors mocks base method.
func (m *MockMapRepository) GetFloors(ctx context.Context, buildID uuid.UUID) ([]entities.Floor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloors", ctx, buildID)
	ret0, _ := ret[0].([]entities.Floor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloors indicates an expected call of GetFloors.
func (mr *MockMapRepositoryMockRecorder) GetFloors(ctx, buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloors", reflect.TypeOf((*MockMapRepository)(nil).GetFloors), ctx, buildID)
}

// GetObjectByID mocks base method.
func (m *MockMapRepository) GetObjectByID(ctx context.Context, objectID uuid.UUID) (entities.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectByID", ctx, objectID)
	ret0, _ := ret[0].(entities.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectByID indicates an expected call of GetObjectByID.
func (mr *MockMapRepositoryMockRecorder) GetObjectByID(ctx, objectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectByID", reflect.TypeOf((*MockMapRepository)(nil).GetObjectByID), ctx, objectID)
}

// GetObjectTypeByID mocks base method.
func (m *MockMapRepository) GetObjectTypeByID(ctx context.Context, id int32) (entities.ObjectTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectTypeByID", ctx, id)
	ret0, _ := ret[0].(entities.ObjectTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectTypeByID indicates an expected call of GetObjectTypeByID.
func (mr *MockMapRepositoryMockRecorder) GetObjectTypeByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectTypeByID", reflect.TypeOf((*MockMapRepository)(nil).GetObjectTypeByID), ctx, id)
}

// GetObjectTypes mocks base method.
func (m *MockMapRepository) GetObjectTypes(ctx context.Context) ([]entities.ObjectTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectTypes", ctx)
	ret0, _ := ret[0].([]entities.ObjectTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectTypes indicates an expected call of GetObjectTypes.
func (mr *MockMapRepositoryMockRecorder) GetObjectTypes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectTypes", reflect.TypeOf((*MockMapRepository)(nil).GetObjectTypes), ctx)
}

// GetObjectsByBuilding mocks base method.
func (m *MockMapRepository) GetObjectsByBuilding(ctx context.Context, buildingID uuid.UUID) ([]entities.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectsByBuilding", ctx, buildingID)
	ret0, _ := ret[0].([]entities.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectsByBuilding indicates an expected call of GetObjectsByBuilding.
func (mr *MockMapRepositoryMockRecorder) GetObjectsByBuilding(ctx, buildingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectsByBuilding", reflect.TypeOf((*MockMapRepository)(nil).GetObjectsByBuilding), ctx, buildingID)
}

// GetObjectsResponse mocks base method.
func (m *MockMapRepository) GetObjectsResponse(ctx context.Context, buildingID uuid.UUID) (entities.GetObjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectsResponse", ctx, buildingID)
	ret0, _ := ret[0].(entities.GetObjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectsResponse indicates an expected call of GetObjectsResponse.
func (mr *MockMapRepositoryMockRecorder) GetObjectsResponse(ctx, buildingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectsResponse", reflect.TypeOf((*MockMapRepository)(nil).GetObjectsResponse), ctx, buildingID)
}

// UpdateBuilding mocks base method.
func (m *MockMapRepository) UpdateBuilding(ctx context.Context, id uuid.UUID, input entities.UpdateBuildingInput) (entities.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuilding", ctx, id, input)
	ret0, _ := ret[0].(entities.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuilding indicates an expected call of UpdateBuilding.
func (mr *MockMapRepositoryMockRecorder) UpdateBuilding(ctx, id, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuilding", reflect.TypeOf((*MockMapRepository)(nil).UpdateBuilding), ctx, id, input)
}

// UpdateObject mocks base method.
func (m *MockMapRepository) UpdateObject(ctx context.Context, id uuid.UUID, input entities.UpdateObjectInput) (entities.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObject", ctx, id, input)
	ret0, _ := ret[0].(entities.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObject indicates an expected call of UpdateObject.
func (mr *MockMapRepositoryMockRecorder) UpdateObject(ctx, id, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObject", reflect.TypeOf((*MockMapRepository)(nil).UpdateObject), ctx, id, input)
}
