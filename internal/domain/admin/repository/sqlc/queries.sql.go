// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO administrators (
    username,
    password_hash,
    email,
    full_name
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, username, email, full_name, created_at
`

type CreateAdminParams struct {
	Username     string
	PasswordHash string
	Email        sql.NullString
	FullName     sql.NullString
}

type CreateAdminRow struct {
	ID        int32
	Username  string
	Email     sql.NullString
	FullName  sql.NullString
	CreatedAt sql.NullTime
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (CreateAdminRow, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.FullName,
	)
	var i CreateAdminRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM administrators
WHERE id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, id)
	return err
}

const getAdminByResetToken = `-- name: GetAdminByResetToken :one
SELECT 
    id,
    username,
    email,
    token_expires_at
FROM administrators
WHERE password_reset_token = $1
`

type GetAdminByResetTokenRow struct {
	ID             int32
	Username       string
	Email          sql.NullString
	TokenExpiresAt sql.NullTime
}

func (q *Queries) GetAdminByResetToken(ctx context.Context, token sql.NullString) (GetAdminByResetTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getAdminByResetToken, token)
	var i GetAdminByResetTokenRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.TokenExpiresAt,
	)
	return i, err
}

const getAdminByUsername = `-- name: GetAdminByUsername :one
SELECT 
    id,
    username,
    password_hash,
    email,
    full_name,
    is_active,
    last_login
FROM administrators
WHERE username = $1
`

type GetAdminByUsernameRow struct {
	ID           int32
	Username     string
	PasswordHash string
	Email        sql.NullString
	FullName     sql.NullString
	IsActive     sql.NullBool
	LastLogin    sql.NullTime
}

func (q *Queries) GetAdminByUsername(ctx context.Context, username string) (GetAdminByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getAdminByUsername, username)
	var i GetAdminByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FullName,
		&i.IsActive,
		&i.LastLogin,
	)
	return i, err
}

const getAllAdmins = `-- name: GetAllAdmins :many
SELECT 
    id,
    username,
    email,
    full_name,
    created_at,
    last_login,
    is_active
FROM administrators
ORDER BY created_at DESC
`

type GetAllAdminsRow struct {
	ID        int32
	Username  string
	Email     sql.NullString
	FullName  sql.NullString
	CreatedAt sql.NullTime
	LastLogin sql.NullTime
	IsActive  sql.NullBool
}

func (q *Queries) GetAllAdmins(ctx context.Context) ([]GetAllAdminsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAdminsRow
	for rows.Next() {
		var i GetAllAdminsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.FullName,
			&i.CreatedAt,
			&i.LastLogin,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPasswordResetToken = `-- name: SetPasswordResetToken :exec
UPDATE administrators
SET 
    password_reset_token = $1,
    token_expires_at = $2
WHERE email = $3
`

type SetPasswordResetTokenParams struct {
	Token     sql.NullString
	ExpiresAt sql.NullTime
	Email     sql.NullString
}

func (q *Queries) SetPasswordResetToken(ctx context.Context, arg SetPasswordResetTokenParams) error {
	_, err := q.db.ExecContext(ctx, setPasswordResetToken, arg.Token, arg.ExpiresAt, arg.Email)
	return err
}

const updateAdminLastLogin = `-- name: UpdateAdminLastLogin :exec
UPDATE administrators
SET last_login = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateAdminLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateAdminLastLogin, id)
	return err
}

const updateAdminPassword = `-- name: UpdateAdminPassword :exec
UPDATE administrators
SET 
    password_hash = $1,
    password_reset_token = NULL,
    token_expires_at = NULL
WHERE id = $2
`

type UpdateAdminPasswordParams struct {
	NewPasswordHash string
	ID              int32
}

func (q *Queries) UpdateAdminPassword(ctx context.Context, arg UpdateAdminPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminPassword, arg.NewPasswordHash, arg.ID)
	return err
}

const updateAdminProfile = `-- name: UpdateAdminProfile :exec
UPDATE administrators
SET 
    email = $1,
    full_name = $2
WHERE id = $3
`

type UpdateAdminProfileParams struct {
	Email    sql.NullString
	FullName sql.NullString
	ID       int32
}

func (q *Queries) UpdateAdminProfile(ctx context.Context, arg UpdateAdminProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminProfile, arg.Email, arg.FullName, arg.ID)
	return err
}

const updateAdminStatus = `-- name: UpdateAdminStatus :exec
UPDATE administrators
SET is_active = $1
WHERE id = $2
`

type UpdateAdminStatusParams struct {
	IsActive sql.NullBool
	ID       int32
}

func (q *Queries) UpdateAdminStatus(ctx context.Context, arg UpdateAdminStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminStatus, arg.IsActive, arg.ID)
	return err
}
