// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createConnection = `-- name: CreateConnection :one
INSERT INTO connections (from_id, to_id, weight)
VALUES ($1, $2, $3)
RETURNING from_id, to_id, weight
`

type CreateConnectionParams struct {
	FromID uuid.UUID
	ToID   uuid.UUID
	Weight float64
}

func (q *Queries) CreateConnection(ctx context.Context, arg CreateConnectionParams) (Connection, error) {
	row := q.db.QueryRowContext(ctx, createConnection, arg.FromID, arg.ToID, arg.Weight)
	var i Connection
	err := row.Scan(&i.FromID, &i.ToID, &i.Weight)
	return i, err
}

const createIntersection = `-- name: CreateIntersection :one
INSERT INTO intersections (id, x, y)
VALUES ($1, $2, $3)
RETURNING id, x, y
`

type CreateIntersectionParams struct {
	ID uuid.UUID
	X  float64
	Y  float64
}

func (q *Queries) CreateIntersection(ctx context.Context, arg CreateIntersectionParams) (Intersection, error) {
	row := q.db.QueryRowContext(ctx, createIntersection, arg.ID, arg.X, arg.Y)
	var i Intersection
	err := row.Scan(&i.ID, &i.X, &i.Y)
	return i, err
}
