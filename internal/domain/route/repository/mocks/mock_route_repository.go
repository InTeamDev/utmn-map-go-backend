// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/HP/Documents/utmn_map/utmn-map-go-backend/internal/domain/route/service (interfaces: RouteRepository)
//
// Generated by this command:
//
//	mockgen -destination=C:/Users/HP/Documents/utmn_map/utmn-map-go-backend/internal/domain/route/repository/mocks/mock_route_repository.go -package=mocks C:/Users/HP/Documents/utmn_map/utmn-map-go-backend/internal/domain/route/service RouteRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/InTeamDev/utmn-map-go-backend/internal/domain/route/entities"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRouteRepository is a mock of RouteRepository interface.
type MockRouteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRouteRepositoryMockRecorder
	isgomock struct{}
}

// MockRouteRepositoryMockRecorder is the mock recorder for MockRouteRepository.
type MockRouteRepositoryMockRecorder struct {
	mock *MockRouteRepository
}

// NewMockRouteRepository creates a new mock instance.
func NewMockRouteRepository(ctrl *gomock.Controller) *MockRouteRepository {
	mock := &MockRouteRepository{ctrl: ctrl}
	mock.recorder = &MockRouteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteRepository) EXPECT() *MockRouteRepositoryMockRecorder {
	return m.recorder
}

// CreateConnection mocks base method.
func (m *MockRouteRepository) CreateConnection(ctx context.Context, fromID, toID uuid.UUID, weight float64) (entities.Edge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", ctx, fromID, toID, weight)
	ret0, _ := ret[0].(entities.Edge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection.
func (mr *MockRouteRepositoryMockRecorder) CreateConnection(ctx, fromID, toID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockRouteRepository)(nil).CreateConnection), ctx, fromID, toID, weight)
}

// CreateIntersection mocks base method.
func (m *MockRouteRepository) CreateIntersection(ctx context.Context, x, y float64, floorID uuid.UUID) (entities.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntersection", ctx, x, y, floorID)
	ret0, _ := ret[0].(entities.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntersection indicates an expected call of CreateIntersection.
func (mr *MockRouteRepositoryMockRecorder) CreateIntersection(ctx, x, y, floorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntersection", reflect.TypeOf((*MockRouteRepository)(nil).CreateIntersection), ctx, x, y, floorID)
}

// DeleteIntersection mocks base method.
func (m *MockRouteRepository) DeleteIntersection(ctx context.Context, buildingID, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntersection", ctx, buildingID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIntersection indicates an expected call of DeleteIntersection.
func (mr *MockRouteRepositoryMockRecorder) DeleteIntersection(ctx, buildingID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntersection", reflect.TypeOf((*MockRouteRepository)(nil).DeleteIntersection), ctx, buildingID, id)
}

// GetConnections mocks base method.
func (m *MockRouteRepository) GetConnections(ctx context.Context, buildingID uuid.UUID) ([]entities.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnections", ctx, buildingID)
	ret0, _ := ret[0].([]entities.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnections indicates an expected call of GetConnections.
func (mr *MockRouteRepositoryMockRecorder) GetConnections(ctx, buildingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnections", reflect.TypeOf((*MockRouteRepository)(nil).GetConnections), ctx, buildingID)
}
