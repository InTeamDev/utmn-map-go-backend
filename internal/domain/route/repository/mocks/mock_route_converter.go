// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/de_Samuel/Documents/Projects/utmn-project/utmn-map-go-backend/internal/domain/route/repository (interfaces: RouteConverter)
//
// Generated by this command:
//
//	mockgen -destination=C:/Users/de_Samuel/Documents/Projects/utmn-project/utmn-map-go-backend/internal/domain/route/repository/mocks/mock_route_converter.go -package=mocks C:/Users/de_Samuel/Documents/Projects/utmn-project/utmn-map-go-backend/internal/domain/route/repository RouteConverter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/InTeamDev/utmn-map-go-backend/internal/domain/route/entities"
	sqlc "github.com/InTeamDev/utmn-map-go-backend/internal/domain/route/repository/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockRouteConverter is a mock of RouteConverter interface.
type MockRouteConverter struct {
	ctrl     *gomock.Controller
	recorder *MockRouteConverterMockRecorder
	isgomock struct{}
}

// MockRouteConverterMockRecorder is the mock recorder for MockRouteConverter.
type MockRouteConverterMockRecorder struct {
	mock *MockRouteConverter
}

// NewMockRouteConverter creates a new mock instance.
func NewMockRouteConverter(ctrl *gomock.Controller) *MockRouteConverter {
	mock := &MockRouteConverter{ctrl: ctrl}
	mock.recorder = &MockRouteConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteConverter) EXPECT() *MockRouteConverterMockRecorder {
	return m.recorder
}

// ConnectionSqlcToEntity mocks base method.
func (m *MockRouteConverter) ConnectionSqlcToEntity(i sqlc.Connection) entities.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionSqlcToEntity", i)
	ret0, _ := ret[0].(entities.Connection)
	return ret0
}

// ConnectionSqlcToEntity indicates an expected call of ConnectionSqlcToEntity.
func (mr *MockRouteConverterMockRecorder) ConnectionSqlcToEntity(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionSqlcToEntity", reflect.TypeOf((*MockRouteConverter)(nil).ConnectionSqlcToEntity), i)
}

// IntersectionSqlcToEntity mocks base method.
func (m *MockRouteConverter) IntersectionSqlcToEntity(intersection sqlc.Intersection) entities.Intersection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntersectionSqlcToEntity", intersection)
	ret0, _ := ret[0].(entities.Intersection)
	return ret0
}

// IntersectionSqlcToEntity indicates an expected call of IntersectionSqlcToEntity.
func (mr *MockRouteConverterMockRecorder) IntersectionSqlcToEntity(intersection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntersectionSqlcToEntity", reflect.TypeOf((*MockRouteConverter)(nil).IntersectionSqlcToEntity), intersection)
}

// IntersectionsSqlcToEntity mocks base method.
func (m *MockRouteConverter) IntersectionsSqlcToEntity(intersections []sqlc.GetIntersectionsRow) []entities.Intersection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntersectionsSqlcToEntity", intersections)
	ret0, _ := ret[0].([]entities.Intersection)
	return ret0
}

// IntersectionsSqlcToEntity indicates an expected call of IntersectionsSqlcToEntity.
func (mr *MockRouteConverterMockRecorder) IntersectionsSqlcToEntity(intersections any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntersectionsSqlcToEntity", reflect.TypeOf((*MockRouteConverter)(nil).IntersectionsSqlcToEntity), intersections)
}
